#!/usr/bin/env bash

set -e

[ -n "$BOOTSTRAPPER_DEBUG" ] && set -x

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

install_docker() {
  fancy_echo "Docker for Mac is not installed ..."
  local _workDir="$TMPDIR/docker_staging"
  mkdir -p $_workDir
  pushd $_workDir > /dev/null 2>&1
  fancy_echo "Downloading Docker for Mac ..."
  curl -s -f -L -O https://download.docker.com/mac/stable/Docker.dmg
  if [ $? != 0 ]; then
    popd > /dev/null 2>&1
    rm -rf $_workDir
    fancy_echo "Couldn't download Docker for Mac!"
    return 1
  fi
  fancy_echo "Mounting Docker.dmg ..."
  hdiutil mount Docker.dmg > /dev/null 2>&1
  fancy_echo "Installing Docker Application ..."
  sudo cp -R "/Volumes/Docker/Docker.app" /Applications
  fancy_echo "Unmounting Docker.dmg ..."
  hdiutil eject /Volumes/Docker > /dev/null 2>&1
  popd > /dev/null 2>&1
  rm -rf $_workDir
}

find_ssh_key() {
  local _found=0
  local _public_keys="id_dsa.pub id_ecdsa.pub id_rsa.pub"
  for public_key in $_public_keys
  do
    if [ ! -f "$HOME/.ssh/$public_key" ]; then
      continue
    fi
    _found=1
  done
  fancy_echo "$_found"
}

generate_ssh_key() {
  local _ssh_key_exists="$(find_ssh_key)"
  if [ $_ssh_key_exists == 0 ]; then
    fancy_echo "No existing SSH key was found, generating ..."
    ssh-keygen -t rsa -b 4096 -C "concur.local"
  else
    fancy_echo "Existing SSH key found ..."
  fi
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

path_exists_in_env() {
  local result=false
  local paths="$(echo $PATH | sed 's/:/ /g')"
  for path in $paths
  do
    [[ ! $path = "$1" ]] && continue

    result=true
  done

  echo $result
}

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      brew upgrade "$@"
    fi
  else
    brew install "$@"
  fi
}

brew_is_installed() {
  local name
  name="$(brew_expand_alias "$1")"

  brew list -1 | grep -Fqx "$name"
}

brew_is_upgradable() {
  local name
  name="$(brew_expand_alias "$1")"

  ! brew outdated --quiet "$name" >/dev/null
}

brew_tap() {
  brew tap "$1" 2> /dev/null
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/.*\//, ""); gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local name
  name="$(brew_expand_alias "$1")"
  local domain="homebrew.mxcl.$name"
  local plist="$domain.plist"

  mkdir -p "$HOME/Library/LaunchAgents"
  ln -sfv "/usr/local/opt/$name/$plist" "$HOME/Library/LaunchAgents"

  if launchctl list | grep -Fq "$domain"; then
    launchctl unload "$HOME/Library/LaunchAgents/$plist" >/dev/null
  fi
  launchctl load "$HOME/Library/LaunchAgents/$plist" >/dev/null
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}

git_clone_or_pull() {
  local repo_src=$1
  local local_repo=$2
  local local_repo_vc_dir=$local_repo/.git
  if [[ ! -d "$local_repo_vc_dir" ]]; then
    git clone --recursive "$repo_src" "$local_repo" 2>/dev/null 1>&2
  else
    pushd "$local_repo" >/dev/null
    local origin_url="$(git remote get-url origin)"
    if [ "$repo_src" = "$origin_url" ]; then
      git pull "$repo_src" 2>/dev/null 1>&2
      git submodule update --init --recursive 2>/dev/null 1>&2
    fi
    popd >/dev/null
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

if [ ! -d "/Library/Developer/CommandLineTools" ]; then
  fancy_echo "Need to install command line tools ..."
  fancy_echo "When complete, re-run Bootstrapper ..."
  2>/dev/null 1>&2 xcode-select --install
  exit 0
fi

if ! command -v docker > /dev/null 2>&1; then
  install_docker
  if [ $? != 0 ]; then
    fancy_echo "Unable to download and install Docker for Mac"
    return 1
  fi
fi

if [ ! -f "$HOME/.zshrc" ]; then
  printf "%s\n" "[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local" >> "$HOME/.zshrc"
fi

case "$SHELL" in
  */zsh) : ;;
  *)
    fancy_echo "Changing your shell to zsh ..."
    chsh -s "$(which zsh)"
    ;;
esac

fancy_echo "Preparing /usr/local ..."
if [ -d "/usr/local" ]; then
  sudo chown -R $(whoami) $(brew --prefix)/*
else
  sudo mkdir /usr/local
  sudo chflags norestricted /usr/local
  sudo chown -R "$(whoami)":admin /usr/local
fi

path_exists=$(path_exists_in_env "/usr/local/bin")
if ! $path_exists; then
  # shellcheck disable=SC2016
  append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1
  export PATH="/usr/local/bin:$PATH"
fi

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
  curl -fsS \
    'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew_tap 'thoughtbot/formulae'
brew_tap 'homebrew/dupes'
brew_tap 'concur/formulae'

brew update

fancy_echo "Updating Unix tools ..."
brew_install_or_upgrade 'coreutils'

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH"'
export PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH"

brew_install_or_upgrade 'bash'
brew_install_or_upgrade 'binutils'
brew_install_or_upgrade 'diffutils'
brew_install_or_upgrade 'ed' --with-default-names
brew_install_or_upgrade 'findutils' --with-default-names
brew_install_or_upgrade 'gawk'
brew_install_or_upgrade 'gnu-indent' --with-default-names
brew_install_or_upgrade 'gnu-sed' --with-default-names
brew_install_or_upgrade 'gnu-tar' --with-default-names
brew_install_or_upgrade 'gnu-which' --with-default-names
brew_install_or_upgrade 'gnutls'
brew_install_or_upgrade 'grep' --with-default-names
brew_install_or_upgrade 'gzip'
brew_install_or_upgrade 'watch'
brew_install_or_upgrade 'wdiff' --with-gettext
brew_install_or_upgrade 'wget'
brew_install_or_upgrade 'ctags'
brew_install_or_upgrade 'git'
brew_install_or_upgrade 'openssl'
brew_install_or_upgrade 'rcm'
brew_install_or_upgrade 'reattach-to-user-namespace'
brew_install_or_upgrade 'the_silver_searcher'
brew_install_or_upgrade 'tmux'
brew_install_or_upgrade 'vim'
brew_install_or_upgrade 'zsh'
brew_install_or_upgrade 'tree'

fancy_echo "Configuring Git and ssh ..."
fancy_echo "Generating SSH key if needed ..."
generate_ssh_key

ssh_config=$HOME/.ssh/config
if [ ! -f "$ssh_config" ]; then
  fancy_echo "Adding github details into ssh config ..."
cat << EOF >> $ssh_config
Host            github.com
IdentityFile    ~/.ssh/id_rsa
User            git
EOF
fi

existing_git_name="$(git config --global user.name || echo "")"
existing_git_email="$(git config --global user.email || echo "")"
if [ -z "$existing_git_name" ] || [ -z "$existing_git_name" ]; then
  fancy_echo "Configuring user information for git commits ..."
  echo -n "What is your full name? "
  read answer
  git config --global user.name "$answer"
  echo -n "What is your email? "
  read answer
  git config --global user.email "$answer"
fi

fancy_echo "Updating utilities ..."
brew_install_or_upgrade 'httpie'
brew_install_or_upgrade 'jq'
git_clone_or_pull 'https://github.com/michaeldfallen/git-radar' "$HOME/.git-radar"
# TODO: Make this better, create a download function
mkdir -p /tmp/certifi-ca-bundle
curl -sL 'https://mkcert.org/generate/' -o "/tmp/certifi-ca-bundle/certs.pem"
mkdir -p "$HOME/.ca-bundle"
mv "/tmp/certifi-ca-bundle/certs.pem" "$HOME/.ca-bundle/"

fancy_echo "Updating GitHub tools ..."
brew_install_or_upgrade 'hub'

fancy_echo "Updating image tools ..."
brew_install_or_upgrade 'imagemagick'

fancy_echo "Updating toolchain ..."
brew_install_or_upgrade 'kubernetes-cli'
brew_install_or_upgrade 'packer'
brew_install_or_upgrade 'vault'
brew_install_or_upgrade 'terraform'
brew_install_or_upgrade 'libyaml' # should come after openssl
brew_install_or_upgrade 'bats'
brew_install_or_upgrade 'nvm'
brew_install_or_upgrade 'rbenv'
brew_install_or_upgrade 'ruby-build'
brew_install_or_upgrade 'python'
brew_install_or_upgrade 'elixir'
brew_install_or_upgrade 'rust'
brew_install_or_upgrade 'go'
brew_install_or_upgrade 'godep'
brew_install_or_upgrade 'watchman'
brew_install_or_upgrade 'corectl'
brew_install_or_upgrade 'git-crypt'

fancy_echo "Configuring Node ..."
find_latest_node_lts() {
  # Grabs the version from every release and uses a Regex to select only LTS
  # releases. The major part of the version will always be even for LTS releases
  # and since the latest is always at the top, we just pull the zero index.
  curl --silent https://nodejs.org/dist/index.json | \
    jq '[.[].version | match("[0-9]*[02468].[0-9]+.[0-9]+"; "g")] | .[0].string' | \
    sed -e 's/^"//'  -e 's/"$//'
}


node_version="6"
mkdir -p "$HOME/.nvm"

# shellcheck disable=SC2016
append_to_zshrc 'export NVM_DIR="$HOME/.nvm"'

# shellcheck disable=SC2016
append_to_zshrc 'source $(brew --prefix nvm)/nvm.sh' 1

export NVM_DIR="$HOME/.nvm"
. "$(brew --prefix nvm)/nvm.sh"

nvm install "$node_version"

nvm alias default "$node_version"

command -v npm && npm install -g chokidar-cli 2>/dev/null 1>&2

fancy_echo "Configuring Ruby ..."
find_latest_ruby() {
  rbenv install -l | grep -v - | tail -1 | sed -e 's/^ *//'
}

ruby_version="$(find_latest_ruby)"
# shellcheck disable=SC2016
append_to_zshrc 'eval "$(rbenv init - --no-rehash)"'
eval "$(rbenv init -)"

if ! rbenv versions | grep -Fq "$ruby_version"; then
  RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/opt/openssl rbenv install -s "$ruby_version"
fi

rbenv global "$ruby_version"
rbenv shell "$ruby_version"
gem update --system
gem_install_or_update 'bundler'
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Configuring Python ..."
# shellcheck disable=SC2016
append_to_zshrc 'export PATH="/usr/local/opt/python/libexec/bin:$PATH"'
export PATH="/usr/local/opt/python/libexec/bin:$PATH"
pip install --upgrade pip
pip install --upgrade virtualenv
pip install --upgrade awscli

fancy_echo "Configuring Go ..."
mkdir -p "$HOME/Go"
# shellcheck disable=SC2016
append_to_zshrc 'export GOPATH="$HOME/Go"'

if [ -f "$HOME/.bootstrapper.local" ]; then
  fancy_echo "Running your customizations from ~/.bootstrapper.local ..."
  # shellcheck disable=SC1090
  . "$HOME/.bootstrapper.local"
fi

fancy_echo "Finished, restart your terminal session ..."
